options{
  STATIC=false;
}

PARSER_BEGIN(Parser)

package parser;
import ast.*;import ast.BoolOP.ASTAnd;import ast.BoolOP.ASTBool;import ast.BoolOP.ASTOr;import ast.NumOP.*;import ast.RefOP.ASTAssign;import ast.RefOP.ASTBinding;import ast.RefOP.ASTDereference;import ast.RefOP.ASTReference;import ast.Struct.*;import java.util.ArrayList;

public class Parser {

}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\r"
}

TOKEN :  /*Operators*/
{
< EL: "\n">
| < AND: "&&" >
| < OR: "||" >
| < LESS: "<" >
| < GREATER: ">" >
| < EQUAL: "==" >
| < NOT_EQUAL: "!=" >
| < Num: (["0"-"9"]) + >
| < Bool: "true" | "false" >
| < PLUS : "+" >
| < MINUS : "-" >
| < TIMES : "*" >
| < DIV : "/" >
| < LPAR : "(" >
| < RPAR : ")" >
| < LET: "let" >
| < IN: "in" >
| < ATTR: "=" >
| < DOTCOMMA : ";" >
| < TWODOTS : ":" >
| < ASSIGN: ":=" >
| < DEREFERENCE: "!" >
| < NEW: "new" >
| <WHILE: "while">
| <DO: "do">
| <END: "end">
| <PRINT: "print">
| <PRINTLN: "println">
| <IF : "if">
| <THEN : "then">
| <ELSE : "else">
}

TOKEN :
{
< INT : (< DIGIT >)+ >
| < #DIGIT : [ "0"-"9" ] >
| < ID : (< LETTER >)+ >
| < #LETTER : [ "a"-"z", "A"-"Z" ] >
}

Exp Start():
{ Exp e; }
{
   e = Semicol() <EL>  { return e; }
}

Exp Semicol():
{ Exp e1,e2;}
{
   e1 = Struct() (<DOTCOMMA>  e2 = Semicol() { e1 = new ASTDotComma(e1,e2); })?
    { return e1; }
}

Exp Struct():
{Exp e; }
{
   e = decl(){ return e; }
   |
   e = whileDo(){ return e; }
   |
   e = println(){ return e; }
   |
   e = print(){ return e; }
   |
   e = logic(){ return e; }
   |
   e = ifThenElse(){ return e; }

}
Exp ifThenElse():
{ Exp e1, e2, e3=null; }
{
  <IF> e1 = Struct() <THEN> e2 = Semicol() (<ELSE> e3 = Semicol())? <END>{ return new ASTIf(e1, e2, e3); }
}
Exp whileDo():
{ Exp e1, e2; }
{
  <WHILE> e1 = Struct() <DO> e2 = Semicol() <END>{ return new ASTWhile(e1, e2); } //While accepts only struct as verification as semicolon return unit ()
}
Exp decl():
{ Token x; Exp e1, e2; ArrayList<ASTBinding> bindings = new ArrayList<ASTBinding>();}
{
  <LET> (x = <ID> <ATTR> e1 = Struct() (<EL>)* {bindings.add(new ASTBinding(new ASTVar(x.image), e1));})+ <IN> (<EL>)* e2 = Struct() { return new ASTLet(bindings, e2); }
}
Exp print():
{ Exp e; }
{
  <PRINT> e = Struct() { return new ASTPrint(e); }
}
Exp println():
{ Exp e; }
{
  <PRINTLN> e = Struct() { return new ASTPrintln(e); }
}

Exp logic():
{ Exp e1, e2; }
{
    e1 = boolOP()
    ( <AND> e2 = boolOP() { e1 = new ASTAnd(e1, e2); }
    | <OR> e2 = boolOP() { e1 = new ASTOr(e1, e2); }
    )*
    { return e1; }
}
Exp boolOP():
{ Exp e1, e2; }
{
    e1 = Expr()
    ( <EQUAL> e2 = Expr() { e1 = new ASTEqual(e1, e2); }
    | <LESS> e2 = Expr() { e1 = new ASTLess(e1, e2); }
    | <GREATER> e2 = Expr() { e1 = new ASTGreater(e1, e2); }
    | <NOT_EQUAL> e2 = Expr() { e1 = new ASTNotEqual(e1, e2); }
    )*
    { return e1; }
}
Exp Expr() :
{ Exp e1, e2; }
{
   e1 = Term()
     ( <PLUS> e2 = Term() { e1 = new ASTAdd(e1,e2); }
     | <MINUS> e2 = Term() { e1 = new ASTSub(e1,e2); } )*
     { return e1; }
}

Exp Term() :
{ Exp e1, e2; }
{
     e1 = Fact()
     ( <TIMES> e2 = Fact() { e1 = new ASTMult(e1,e2); }
     | <DIV> e2 = Fact() { e1 = new ASTDiv(e1,e2); } )*
     { return e1; }
}

Exp Fact() :
{ Token x; Exp e;}
{
  x = <Num>
{
 	return new ASTInt(Integer.parseInt(x.image));
}
|
  x = <Bool>
{
    return new ASTBool(Boolean.parseBoolean(x.image));
}
|
  x = <ID> (<ASSIGN> e = Fact()
{
    return new ASTAssign(new ASTVar(x.image),e);
}
)?
{
    return new ASTVar(x.image);
}
|
  <MINUS> x = <Num>
{
    return new ASTInt(-(Integer.parseInt(x.image)));
}
|
 <DEREFERENCE> e = Fact()
{
  return new ASTDereference(e);
}
|
 <NEW> e = Fact()
{
  return new ASTReference(e);
}
|
  <LPAR> e = Semicol() <RPAR>
{
 return e;
}

}

 






















